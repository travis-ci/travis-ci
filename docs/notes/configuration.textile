h1. Configuration

I prefer keeping configuration management out of Travis, at least for now. Almost all configuration can be done via a YAML file checked into the repository that is requesting the build. This has a couple of advantages:

* We're effectively re-using the Github interface (so it works). The build configuration is public to everyone, so people can help each other fix their builds, link to config files etc. Whoever has write access to the repository can update them. Heck, there might be pull requests for them.
* We're re-using the Github interface (so we don't need to implement one). It might seem trivial to throw in a few forms at first, but as soon as we'll try to integrate the UI experience for these things with the JS based frontend for the repository/builds then this quickly might become more work than we want to invest. We'd offer a crappy interface instead of no one.
* It's sexy. Programmers love to quickly fix a text file, push it and see something happen. Why implement an IDE with dialog boxes, the need to place menus and make anything work well when we can just use VI? ;)


h2. Build matrices

The point of build matrices is that many open source Ruby projects need to run their libraries against different setups, like (most commonly) different RVMs and (less often) different Gemfiles (e.g. Rails 2.3.x, Rails 3.0.x etc.). In theory build matrices could support any number of dimensions (Jenkins does that, afaik), but in praxis most Ruby projects will already be very happy with the two dimensions RVM and Gemfile.

A build matrix for a repository can be specified in the .travis.yml file like this:

<strike><pre>
# .travis.yml
matrix:
  rvm: ["1.8.7", "1.9.2"]
  bundle_gemfile: ["test/Gemfile.rails-2.3.x", "test/Gemfile.rails-3.0.x"]
</pre></strike>

Ok ... that didn't work, because on 1.8.7 Hashes aren't sorted and we'd get back the matrix in reverse order randomly. So let's use Arrays like this:

<pre>
# .travis.yml
matrix:
  - ["rvm", "1.8.7", "1.9.2"]
  - ["bundle_gemfile", "test/Gemfile.rails-2.3.x", "test/Gemfile.rails-3.0.x"]
  - ["except", [["rvm", 1.8.7], ["bundle_gemfile", "test/Gemfile.rails-3.0.x"]]]
</pre>

Travis would need to introduce a separate step to expand the matrix. With a matrix a parent build passes when all its child builds pass, so it's kind of a 2-level tree. We won't get the configuration data from the Github service ping, so we need to fetch it from Github which needs to happen in a worker. Once we have the configuration we can expand the matrix to child builds.

1. Github pings
2. Store a build job (no changes here)
3. Worker fetches the config file and posts it to /build/1/config
4. App expands the build so it has many child builds and creates a new build job for each of them
5. Workers process the build jobs (no changes except for minor stuff) and posts back results
6. App collects the results and updates the parent build once all child builds have finished

So, basically the build job would pull the configuration and either post it back and quit if there's something to configure or actually run the build.

The client (JS app) will probably require the most work. We'll need a new build_matrix/show view that the parent build's status along and an overview of all children's statuses. Clicking on a children's link should then display a view similar to the current build/show view.

Why do we need to post the configuration back and let the app do the matrix expansion? Why not do that in the worker and directly run the first child build?

That might be a viable optimization in the future, but there are two things to take into account:

* Security. We haven't solved the worker security, yet. The worker will probably always be able to POST to the app, but might not be able to schedule jobs to Redis.
* Workers capabilities. At some point we'll want workers to be able to automatically announce their capabilities (e.g. "i support the RVMs a, b, c. i support the databases x, y, z."). Repositories/build configurations can then require certain capabilities for running the build. From this point on any worker will be able to configure a build but might not be able to actually run the first child or even any child.

So it seems that posting the configuration back to the app is a more solid pattern and doesn't need to be changed once we tackle security and/or worker capabilities.
