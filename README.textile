h1. Travis - a distributed build system "!https://secure.travis-ci.org/travis-ci/travis-ci.png?branch=master!":http://travis-ci.org/travis-ci/travis-ci

Travis is an attempt to create an open-source, distributed build system for the Ruby community that:

1. allows open-source projects to register their repository and have their test-suites run on demand
2. allows users to contribute build capacities by connecting a VM that runs a build agent somewhere on their underused servers

h2. Contact
* "Github":http://github.com/travis-ci
* "Twitter":http://twitter.com/travisci
* "IRC":irc://irc.freenode.net#travis
* "Mailinglist":http://groups.google.com/group/travis-ci

h2. User Documentation

* "Getting started":http://about.travis-ci.org/docs/user/getting-started
* "Build Configuration":http://about.travis-ci.org/docs/user/build-configuration
* "Status Images":http://about.travis-ci.org/docs/user/status-images

h2. Developer Documentation

* "The worker":http://about.travis-ci.org/docs/dev/worker/

h2. Other sources

* "Travis CI":http://bostonrb.org/presentations/travis-ci - Video: Presentation at Boston.rb ("Jeremy Weisskotten":https://twitter.com/#!/doctorzaius)
* "Travis - a distributed build server tool for the Ruby community":http://svenfuchs.com/2011/2/5/travis-a-distributed-build-server-tool-for-the-ruby-community - Introductory blog post about the original idea ("Sven Fuchs":http://svenfuchs.com)

h2. Overview

Travis consists of four main parts:

* A "Backbone.js":http://documentcloud.github.com/backbone single-page application that runs client side.
* A Rails 3 application that serves to the in-browser application and takes pings from Github.
* A "Resque":https://github.com/defunkt/resque worker for running a project's test suite remotely.
* A websocket server (we use "Pusher":http://pusher.com) for tailing build results to the browser.

!https://github.com/travis-ci/travis-ci/raw/master/docs/travis.spike-3.png!

You can also watch this (quite old, but still valid) screencast to get an idea: "1:20 quick demo screencast (spike 2)":http://www.youtube.com/watch?v=mNOwCJhjWAw

h2. Goals

With Travis CI our vision is to become for builds (i.e. tests, for starters) what rubygems.org is for gems.

Our goal is to build a rock solid, but dead-easy to use open-source continuous integration service for the Ruby community.

We try to follow the 80/20 for requirements. I.e. we focus on the most common use cases for testing Ruby Gems.

Travis CI does **not** currently support closed in-house installations, although we know of people working on this. Ask on the "IRC channel":irc://irc.freenode.net#travis for more information.

h2. Running the tests

Integration tests are implemented using "Jasmine":http://pivotal.github.com/jasmine and can be run in the browser:

<pre>
$ RAILS_ENV=jasmine rake db:migrate db:seed
$ rails s thin -e jasmine
$ open http://localhost:3000
</pre>

To run the whole test suite simply do:

<pre>
$ rake test
</pre>

h2. Design Iterations

* "Second design Feb 2010":https://skitch.com/svenfuchs/rtfas/travis.2
* "First design Jan 2010":https://skitch.com/svenfuchs/rtms3/travis-design-1-2010-02
* Initial mockups of "index":https://github.com/travis-ci/travis-ci/raw/master/docs/mockups/main.png and "details":https://github.com/travis-ci/travis-ci/raw/master/docs/mockups/build_details.png

h2. First spike

My first spike was using Nanite for running workers.

* "1:36 quick demo screencast (spike 1)":http://www.youtube.com/watch?v=qdTV-b6BJHA
* "Architecture diagram (spike 1)":https://github.com/travis-ci/travis-ci/raw/master/docs/travis.spike-1.png


h2. Requirements

* Ruby 1.8.7 or Ruby 1.9.2 (Ruby 1.9.1 is not supported)
* PostgreSQL for the pg gem
