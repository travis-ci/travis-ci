It probably would make sense to refactor to use both "global" and "local" collections. Or maybe even
omit the local collections entirely and just reference models using an array of ids there.

E.g. a global collection of Builds could just store all builds that ever were downloaded to the client.
A build/show view could use models retrieved from this global collection.

This should greatly reduce complexity and fix complicated situations where a matrix child build is
referenced through a shallow route /repo/builds/:id and it's hard to look this (currently bound) model
up when an external event comes in for this model.

--------------------------------------------------------------------------------------

Unless i'm still not getting it `attachTo` should happen after the element has been rendered (i.e.
at least created) because otherwise an event could be triggered and the element is then missing.

This currently isn't actually implemented across all views.

--------------------------------------------------------------------------------------

// View Event Lifecycle

1. initialize: basic setup, bindAll etc.
2. render: create/setup a skeleton html element
3. bindTo (wire?, connect?): bind (start listening) to given collections/models
4. (event callbacks)
5. unbind (reset?): unbind from collections/models

// something like this ...

Travis.Views.BaseList = Backbone.View.extend({
  initialize: function() {
    this.render();
    return this;
  },
  element: function() {
    return (this._element || this._element = $(this.selectors.element));
  },
  render: function() {
    this.element().html(this.templates.list({}));
    this.element().addClass('loading');
  },
  renderItem: function(item) {
    $(this.selectors.list, this.element()).prepend($(this.templates.item(item.toJSON())));
  },
  connect: function(collection) {
    this.disconnect();
    this.collection = collection;
    this.collection.bind('add', this.elementAdded);
    this.collection.bind('remove', this.elementRemoved);
    this.collection.bind('refresh', this.collectionRefreshed)
    // render items unless the collection is empty?
  },
  disconnect: function() {
    if(this.collection) {
      this.collection.unbind('add');
      delete this.collection;
      delete this._element;
    }
  },
  elementAdded: function(item) {
    renderItem(item);
  },
  elementRemoved: function(item) {
    $(this.selector + '' + this.selectors.item + job.get('id'), this.element()).remove();
  },
  collectionRefreshed: function(collection) {
    this.element().removeClass('loading')
  },
  updateEmpty: function() {
    var element = $('.empty', this.element());
    this.jobs.length == 0 ? element.show() : element.hide();
  }
});

Travis.Views.Jobs = Travis.Views.BaseList.extend({
  selectors: {
    element: '#jobs',
    list: '#jobs ul',
    item: '#job_' // hmm ...
  },
  initialize: function(args) {
    this.templates = {
      list: args.app.templates['jobs/list'],
      item: args.app.templates['jobs/_item']
    };
    return Travis.Views.BaseList.prototype.initialize.apply(this, arguments);
  },
});


--------------------------------------------------------------------------------------

Collection
  whenLoaded: function(callback) {
    if(this.loading) {
      this.bind('loaded', function() { this.unbind('loaded'); callback(); }.bind(this));
    } else {
      callback();
    }
  },
  selectLast: function() {
    this.getOrFetchLast(function(element) {
      if(element) element.select();
    })
  },
  selectBy: function(options) {
    this.getOrFetchBy(options, function(element) {
      if(element) element.select();
    });
  },
  getOrFetchBy: function(options, callback) {
    element = this.getBy(options);
    if(element) {
      callback(element);
    } else {
      this.fetchBy(options, callback);
    }
  },
  getBy: function(options) {
    this.detect(function(element) {
      return options.all(function(name, value) { return element.get(name) == value; })
    });
  },
  fetchBy: function(callback) {
    // fetch ...
    callback()
  }

Controller
  repository: function() {
    this.repositories.whenLoaded(this.repositories.selectLast);
  },
  repositoryHistory: function(username, name) {
    this.repositories.whenLoaded(this.repositories.selectBy, { name: username + '/' + name });
  }

RepositoryShow
  initialize: function() {
    this.tabCurrent = new TabCurrent();
  },
  render: function() {
    this.tabCurrent.render();
  },
  attachTo: function(repositories) {
    this.repositories = repositories;
    this.repositories.bind('select', this.repositorySelected);
  },
  repositorySelected: function(repository) {
    this.repository = repository;
    this.tabCurrent.attachTo(this.repository.builds)
    this.setTitle();
  },

Tab
  initialize: function(content) {
    this.content = content;
  },
  attachTo: function(target) {
    this.content.attachTo(target);
  }
  activate: function() {
    // show tab, hide others
  }

Build.Current
  attachTo: function(builds) {
    this.builds = builds;
    this.builds.bind('select', this.buildSelected);
    this.builds.whenLoaded(this.selectLastBuild);
  },
  selectLastBuild: function() {
    this.builds.last().select();
  },
  buildSelected: function(build) {
    new Summary(build).render();
    new Log(build).render();
  }
